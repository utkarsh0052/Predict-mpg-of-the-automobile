# -*- coding: utf-8 -*-
"""Predict mpg of the automobile.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k0kOIkw72oLAiTludVyDB4V3VdztfDKc

### Importing the LIbraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd #data processing, I/O operation
import numpy as np #linear algebra
import seaborn as sns 
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# %matplotlib inline

"""### loading the dataset"""

data = pd.read_csv("C:/Users/Harshit Tyagi/Downloads/auto-mpg.csv")
data.head(10)

data.tail(10)

data.drop(['car name'], axis=1, inplace=True)
data.head()

# Summary of the Dataset
data.describe()

"""### Data Preprocessing"""

data.isnull().sum()

data['horsepower'].unique()

data = data[data.horsepower != '?']

'?' in data

data.shape

"""### Correlation matrix"""

data.corr()['mpg'].sort_values()

#Plotting the heatmap of the correlation

plt.figure(figsize=(10,10))
sns.heatmap(data.corr(), annot=True, linewidths=0.5, center=0, cmap='rainbow')
plt.show()

"""### Univariate Analysis"""

sns.countplot(data.cylinders, data=data, palette='rainbow')
plt.show()

sns.countplot(data['model year'], palette='rainbow')
plt.show()

sns.countplot(data.origin, palette='rainbow')
plt.show()

"""### Multi-variate Analysis"""

sns.boxplot(y='mpg', x='cylinders', data=data, palette='rainbow')
plt.show()

sns.boxplot(y='mpg', x='model year', data=data, palette='rainbow')
plt.show()

# Modelling my dataset

X = data.iloc[:,1:].values
Y = data.iloc[:,0].values

"""### Train and test data split"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X,Y,test_size=0.3, random_state=0)

"""### Build the model"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

regression = LinearRegression()
regression.fit(x_train,y_train)

y_pred = regression.predict(x_test)

print(regression.score(x_test, y_test))

"""### polynomial regression"""

from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree=2)
X_poly = poly_reg.fit_transform(X)

x_train, x_test, y_train, y_test = train_test_split(X_poly,Y,test_size=0.3, random_state=0)

lin_regression = LinearRegression()
lin_regression.fit(x_train,y_train)

print(lin_regression.score(x_test, y_test))

"""### Conclusion

Accuracy score improves in the case of polynomial regression compared to the linear regression because it fits data much better. In this project, what we learned:
1. Loading the dataset
2. Univariate analysis
3. multivariate analysis
4. Linear regression
5. Polynomial Regression
"""

